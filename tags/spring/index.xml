<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on Huangh&#39;s blog</title>
    <link>https://h2cone.github.io/tags/spring/</link>
    <description>Recent content in spring on Huangh&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Huangh&#39;s blog</copyright>
    <lastBuildDate>Thu, 04 Jun 2020 00:00:24 +0800</lastBuildDate><atom:link href="https://h2cone.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Goodbye Spring</title>
      <link>https://h2cone.github.io/2020/06/04/goodbye-spring/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:24 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2020/06/04/goodbye-spring/</guid>
      <description>图片来自网络  本文首发于 https://h2cone.github.io/
 </description>
    </item>
    
    <item>
      <title>切面和动态代理以及字节码</title>
      <link>https://h2cone.github.io/2019/09/17/aop_proxy_bytecode/</link>
      <pubDate>Tue, 17 Sep 2019 11:29:21 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2019/09/17/aop_proxy_bytecode/</guid>
      <description>楔子 想象一下，我们编写的代码块重复了两次或两次以上，理智的程序员可能会考虑重构，提取公共的部分抽象成函数或方法，通过重用函数或方法以此减少冗余，简化代码，甚至预防了“牵一发而动全身”的噩梦，这已经算得上是对 DRY 和 SoC 原则的践行。DRY（Don&amp;rsquo;t repeat yourself）教导我们尽量减少重复代码，而 SoC（Separation of Concerns）指的是关注点分离，因为关注点混杂会极大地增强复杂性，好比把什么都混为一谈，堆积而成的祖传代码，这又是程序员们的另一个噩梦，所以才把复杂的问题分解成若干独立的小问题，模块化，极力追求“高内聚，低耦合”。
AOP（Aspect-oriented programming）是对横向的重用，非常符合 DRY 和 SoC 的原则。直观上，代码总是从上往下执行，不妨称之为纵向，OOP（Object-oriented Programming）的继承也可看作是纵向；相对则是横向，从横跨多个类的角度来看，横向有着许许多多的统一逻辑可以切入，比如安全检查、异常处理、日志输出、事务管理、追踪、监控等等，这些统一逻辑能够被抽象成模块，重用它们甚至不需要显式使用或只需要编写简单的元数据进行声明，一次编写，到处执行，Java 程序员们已经体验过不少 Spring AOP 的魔术。
AOP 能够使前文所述的统一逻辑模块化，这些统一逻辑可称之为横切关注点（crosscutting concerns），切面（Aspect）则作为模块，因此译为切面导向编程。切面的作用效果彷佛是往程序的执行点注入了新的代码，这些执行点被称之为接入点（Join Point），比如方法调用的前后；接入点的集合称之为切入点 （Pointcut），比如满足条件的一组方法；注入的代码称之为建议（Advice），比如在方法调用前后输出日志；其中代码注入的术语是编织（Weaving），既然把编织工作交给库或框架，那么可能是在编译时编织（Compile-time weaving）或运行时编织（Run-Time weaving），还可能在编译后编织（Post-compile weaving） 或加载时编织（Load-time weaving）。
虽说如此，那属于 Spring 核心的 Spring AOP 的魔术是怎么做到的呢？
喧闹中，听见了一句悄悄话：
 Spring AOP is implemented by using runtime proxies.
 另一句悄悄话：
 In the Spring Framework, an AOP proxy is a JDK dynamic proxy or a CGLIB proxy.
 原来 Spring AOP 是使用运行时代理实现的，代理则是由 JDK 动态代理或 CGLIB 生成。据传闻所说，利用 JDK 动态代理能够在运行时生成代理，一番打听之后也了解到 CGLIB 是一个字节码生成和转换库，也可用于动态生成代理。</description>
    </item>
    
  </channel>
</rss>
