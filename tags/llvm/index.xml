<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>llvm on Huangh&#39;s blog</title>
        <link>https://h2cone.github.io/tags/llvm/</link>
        <description>Recent content in llvm on Huangh&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 22 Jan 2021 10:20:35 +0800</lastBuildDate><atom:link href="https://h2cone.github.io/tags/llvm/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>编译的一些事</title>
        <link>https://h2cone.github.io/2021/01/22/some_things_about_compilation/</link>
        <pubDate>Fri, 22 Jan 2021 10:20:35 +0800</pubDate>
        
        <guid>https://h2cone.github.io/2021/01/22/some_things_about_compilation/</guid>
        <description>&lt;h2 id=&#34;一次交叉编译体验&#34;&gt;一次交叉编译体验&lt;/h2&gt;
&lt;p&gt;有一个项目使用&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/High-level_programming_language&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;高级编程语言&lt;/a&gt;创建原生进程（native process）来执行 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Shell_script&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Shell 脚本&lt;/a&gt;，其中有一段用于编辑特定配置文件的代码片段。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; name in &lt;span class=&#34;nv&#34;&gt;$names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
    sed -i -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/&amp;lt;@&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;@&amp;gt;/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/g&amp;#34;&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;%.*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;.&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;component_instance&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Sed&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sed（stream editor）&lt;/a&gt;是一个用于过滤和转换文本的 Unix 程序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 将 file.txt 中的 before 就地替换为 after&lt;/span&gt;
sed -i -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/before/after/g&amp;#39;&lt;/span&gt; file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;用法还算简单，但是，如果 after 包含特殊字符，比如传递包含正则表达式的多行代码（想象一下 Logstash 配置），运行时将极有可能发生类似错误：&lt;code&gt;unknown option to s&#39;&lt;/code&gt;。如果要&lt;a class=&#34;link&#34; href=&#34;https://unix.stackexchange.com/questions/32907/what-characters-do-i-need-to-escape-when-using-sed-in-a-sh-script&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;对特殊字符进行转义&lt;/a&gt;，这种方案不仅复杂还易错，甚至可能会更改“间接调用” Shell 脚本的应用程序代码。换个角度，sed 是否有更好的替代品？&lt;/p&gt;
&lt;p&gt;感谢使用 &lt;a class=&#34;link&#34; href=&#34;https://www.rust-lang.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Rust&lt;/a&gt; &lt;strong&gt;重写一切&lt;/strong&gt;的开源软件作者们，&lt;a class=&#34;link&#34; href=&#34;https://github.com/chmln/sd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sd&lt;/a&gt; 完全可以代替 sed，而且能识别特殊字符。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sd -s before after file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;兴致勃勃从 &lt;a class=&#34;link&#34; href=&#34;https://github.com/chmln/sd/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;releases&lt;/a&gt; 下载&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Executable&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;可执行文件&lt;/a&gt;，却遇到因为开发/测试环境的 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/GNU_C_Library&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;glibc&lt;/a&gt; 版本不符合 sd 的要求从而导致无法正常执行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ./sd-v0.7.6-x86_64-unknown-linux-musl --help
./sd-v0.7.6-x86_64-unknown-linux-musl: /lib64/libc.so.6: version &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;GLIBC_2.18&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; not found &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;required by ./sd-v0.7.6-x86_64-unknown-linux-musl&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;升级 glibc 有一定风险，管理员不一定允许升级，而且客户/用户也不一定允许&lt;a class=&#34;link&#34; href=&#34;https://github.com/chmln/sd#installation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;在线安装 sd&lt;/a&gt;。理想情况下，只需要提前在本地将 sd 源代码编译成目标服务器的可执行代码，那么目标服务器就无需安装 Rust 或其它东西了。得益于 &lt;a class=&#34;link&#34; href=&#34;https://chr4.org/posts/2017-03-15-cross-compile-and-link-a-static-binary-on-macos-for-linux-with-cargo-and-rust/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cross-compile and link a static binary on macOS for Linux with cargo and rust&lt;/a&gt;，成功在 macOS Big Sur 上将 sd 源代码编译成开发/测试环境的可执行文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ file sd
sd: ELF 64-bit LSB shared object, x86-64, version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SYSV&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, dynamically linked, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;所谓&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Cross_compiler&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;交叉编译&lt;/a&gt;，即将源文件从运行编译器的平台生成可在其它平台执行的文件。除了 &lt;a class=&#34;link&#34; href=&#34;https://rust-lang.github.io/rustup/cross-compilation.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Rust 天然支持交叉编译&lt;/a&gt; ，其它主流语言做得到吗？&lt;a class=&#34;link&#34; href=&#34;https://blog.golang.org/ports&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Go 开箱即支持交叉编译&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;aot-和-jit&#34;&gt;AOT 和 JIT&lt;/h2&gt;
&lt;p&gt;Java 就麻烦得多了。&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Javac&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Oracle Java 编译器（javac）&lt;/a&gt;并不能将 Java 源代码（Source Code）编译成原生可执行代码，而只能编译成 Java 字节码（Bytecode）。&lt;/p&gt;
&lt;p&gt;Java 字节码通常与平台无关（platform-independent），由 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Java_virtual_machine&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java 虚拟机&lt;/a&gt;的解释器（Bytecode Interpreter）执行（如果有的话）。很久很久以前，Sun 用“&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Write_once,_run_anywhere&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;编写一次，到处运行&lt;/a&gt;”的口号来说明 Java 的跨平台优势，&lt;strong&gt;Java 跨平台是因为 Java 虚拟机不跨平台&lt;/strong&gt;，不同的平台安装不同的 Java 虚拟机才可能运行相同的 Java 程序（不同平台的 Java 字节码解释器可以执行相同的字节码）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://h2cone.github.io/img/jvm/bytecode-interpreter_jit-compiler.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;bytecode-interpreter_jit-compiler&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;当 Java 字节码由解释器执行时，总是比编译为原生机器码的同一程序执行慢。JIT 编译器（JIT Compiler）专门缓解此问题，JIT 编译器通常在&lt;strong&gt;运行时&lt;/strong&gt;将 Java 字节码编译成原生机器码（Native/Machine Code），又称动态编译。相对地说，静态编译又名 AOT 编译（Ahead-of-time compilation），AOT 编译器的编译过程（从源代码到原生机器码）发生在程序运行之前。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello, world&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一个表面上非常简单的 C 语言程序（hello.c），使用 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/GNU_Compiler_Collection&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GCC&lt;/a&gt; 编译后输出可执行的目标程序（hello），这个过程包括了 AOT 编译。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;% gcc -o hello hello.c
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可执行至少意味着可通过 &lt;code&gt;./&lt;/code&gt; 执行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;% ./hello 
hello, world
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;发生了什么事？了解编译系统如何工作，对将来优化程序性能有益处。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://h2cone.github.io/img/csapp/%e7%bc%96%e8%af%91%e7%b3%bb%e7%bb%9f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;编译系统&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（深入理解计算机系统（原书第3版）1.2 程序被其他程序翻译成不同的格式）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;% file hello
hello: ELF 64-bit LSB shared object, x86-64, version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SYSV&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; GNU/Linux 2.6.32, BuildID&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;sha1&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;dd72445243a497f2f62a1e5d19185ca41181e4b5, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;JIT 编译器通常在预热（warmup）期工作，虽然 Java 程序启动速度会受到影响，但是方法调用（Method Invocation）发生时，Java 虚拟机将通过分析数据（Profiling）积极应用优化。例如，将调用次数已达阈值的方法（&lt;strong&gt;热点&lt;/strong&gt;代码）编译成原生机器码并写入代码缓存（Code Cache），代码缓存的容量可以通过选项 -XX:ReservedCodeCacheSize 设置；将来调用同一方法时，不是&lt;strong&gt;解释&lt;/strong&gt;执行（基于 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Stack_machine&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Stack Machine&lt;/a&gt;），而是从缓存读取原生机器码&lt;strong&gt;直接&lt;/strong&gt;执行（基于 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Register_machine&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Register Machine&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://h2cone.github.io/img/jvm/jvm-lifecycle.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;jvm-lifecycle&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在生成原生机器码之前，JIT 编译器会先积极优化字节码。例如，&lt;strong&gt;方法内联（Method Inlining）&lt;/strong&gt;、&lt;strong&gt;逃逸分析（Escape Analysis）&lt;/strong&gt;、&lt;strong&gt;循环展开（Loop unrolling）&lt;/strong&gt;、&lt;strong&gt;锁粗化（Lock Coarsening）&lt;/strong&gt;、&lt;strong&gt;锁清除（Lock Elision）&lt;/strong&gt; 等等。&lt;/p&gt;
&lt;p&gt;由于 Java 虚拟机隐藏了操作系统具体实现的复杂性，并给应用程序提供了简单或统一的接口，随着 Java 虚拟机的迭代升级，即使运行同一程序，也能实现更高的性能。Oracle 的 Java 默认虚拟机是 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/HotSpot_%28virtual_machine%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HotSpot JVM&lt;/a&gt;，HotSpot JVM 用 C++ 编写而成，它有两个 JIT 编译器，C1 和 C2。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://h2cone.github.io/img/jvm/jvm_compiler_threads.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;jvm_compiler_threads&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;C1 适用于 Client（java –client），启动快，但峰值性能受损；C2 适用于 Server（java –server），非常适合编译热点方法，但启动慢（热身）。权衡利弊的结果可能是组合使用 C1 和 C2，Java 8 后默认开启多层编译（-XX:+TieredCompilation），先以 C1 编译，采样足够后以 C2 编译。&lt;/p&gt;
&lt;p&gt;所谓的 JVM 性能调优，通常聚焦在内存与 GC，若不考虑应用程序可能包含低效的部分，那不妨&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/TZVKDhisb86fdsnKhkfZPA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;调参（选项或标记）&lt;/a&gt; 之后测试是否符合预期。真遇到了需要监视 JIT 的场景，换言之是为了性能优化或故障排查的目的分析 JIT 日志，发觉日志难读，但好在发现一款 JIT 日志分析与可视化工具——&lt;a class=&#34;link&#34; href=&#34;https://github.com/AdoptOpenJDK/jitwatch&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jitwatch&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;graalvm-和-llvm&#34;&gt;GraalVM 和 LLVM&lt;/h2&gt;
&lt;p&gt;退一步来说，借助虚拟机可以在&lt;strong&gt;编译时&lt;/strong&gt;将 Java 程序编译成可执行文件。Oracle 的 &lt;a class=&#34;link&#34; href=&#34;https://www.graalvm.org/docs/introduction/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GraalVM&lt;/a&gt; 的附加组件包括了一种将 Java 应用程序 AOT 编译为原生可执行文件的技术，名为 &lt;a class=&#34;link&#34; href=&#34;https://www.graalvm.org/reference-manual/native-image/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Native Image&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GraalVM 是用于运行以 JavaScript、Python、Ruby、R、基于 JVM 的语言（例如 Java、Scala，Clojure，Kotlin）、基于 LLVM 的语言（例如 C 和 C ++）编写的应用程序的通用虚拟机。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GraalVM Native Image 技术存在不容忽视的限制，原因之一是 AOT 编译参考的静态信息有时是不够的，并且很难猜测应用程序的实际行为。为了能够构建高度优化的原生可执行文件，GraalVM 会运行积极的静态分析，在编译时必须知道所有可访问的类和字节码，否则 Java 的动态特性（例如动态类加载、反射、动态代理等等）严重受限，甚至不可用。因此，&lt;a class=&#34;link&#34; href=&#34;https://www.graalvm.org/reference-manual/native-image/Limitations/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GraalVM Native Image 兼容和优化指南&lt;/a&gt;建议用户编写配置文件“提示” GraalVM 做正确的事情。&lt;/p&gt;
&lt;p&gt;GraalVM Native Image 暂不支持交叉编译，但不意味不能在一个平台构建出其它平台的可执行文件。运用 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/OS-level_virtualization&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;操作系统级别的虚拟化&lt;/a&gt;即可，例如在本地下载各个平台的 &lt;a class=&#34;link&#34; href=&#34;https://www.graalvm.org/docs/getting-started/container-images/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GraalVM Docker 镜像&lt;/a&gt;，以此为基础构建可执行文件的镜像。&lt;/p&gt;
&lt;p&gt;GraalVM 之所以能运行不同种类的语言编写而成的应用程序的原因之一是 GraalVM 的核心组件与附加组件包含了多种运行时（Runtime）。比如运行 Java、JavaScript/Node.js、C/C++ 程序所需的环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java HotSpot VM&lt;/li&gt;
&lt;li&gt;Node.js JavaScript runtime&lt;/li&gt;
&lt;li&gt;LLVM runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://llvm.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LLVM&lt;/a&gt; 是模块化和可重用的编译器与工具链技术的集合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;LLVM 不是通用虚拟机（VM），但使用 LLVM 的编程语言非常之多（从&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/LLVM&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LLVM 的维基百科词条第二段&lt;/a&gt;可以体会到）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://h2cone.github.io/img/llvm/llvm_compiler_pipeline.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;llvm_compiler_pipeline&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;LLVM 编译器通常分为三部分：前端（frond-end）、中端（middle-end）、后端（back-end）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端：将源码编译为 IR。&lt;/li&gt;
&lt;li&gt;中端：优化 IR。&lt;/li&gt;
&lt;li&gt;后端：将 IR 编译为机器码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IR&lt;/strong&gt; 是&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Intermediate_representation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;中间表示（Intermediate representation）&lt;/a&gt;的简称，它是一种与平台无关（platform-independent）的代码/指令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;% clang-11 hello.c -o hello
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;例如，使用 &lt;a class=&#34;link&#34; href=&#34;https://clang.llvm.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Clang&lt;/a&gt; 编译简单的 C 语言程序（hello.c），最终得到其可执行文件（hello，如果想观看 LLVM IR 的模样，不妨试试&lt;a class=&#34;link&#34; href=&#34;http://ellcc.org/demo/index.cgi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;在浏览器编译 C 语言程序&lt;/a&gt;）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;% file hello
hello: ELF 64-bit LSB executable, x86-64, version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SYSV&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; GNU/Linux 2.6.32, BuildID&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;sha1&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;bf54bb50604533e477e6e42d576c573f88f2a986, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当我们想创建新的编程语言时，可以不必花费时间和精力去重新发明那些特定的轮子（例如用于编译与优化的工具），而是直接&lt;a class=&#34;link&#34; href=&#34;https://llvm.org/docs/tutorial/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;使用 LLVM 实现语言&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;从编译时开始重用&#34;&gt;从编译时开始重用&lt;/h2&gt;
&lt;p&gt;程序员们日常使用的各种库（Library）或框架（Framework）总是从编译时开始重用（Reuse），那时，彷佛站在了巨人的肩膀上。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文首发于 &lt;a class=&#34;link&#34; href=&#34;https://h2cone.github.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://h2cone.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Ahead-of-time_compilation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wiki # Ahead-of-time compilation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Just-in-time_compilation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wiki # Just-in-time compilation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://cr.openjdk.java.net/~vlivanov/talks/2015_JIT_Overview.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JVM JIT-compiler overview&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;基本功 | Java即时编译器原理解析及实践&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ethz.ch/content/dam/ethz/special-interest/infk/inst-cs/lst-dam/documents/Education/Classes/Spring2018/210_Compiler_Design/Slides/2018-Compiler-Design-Guest-Talk.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The Java HotSpot VM Under the Hood&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://openjdk.java.net/groups/compiler/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The Java programming language Compiler Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Java_performance&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wiki # Java performance&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.infoworld.com/article/3247799/what-is-llvm-the-power-behind-swift-rust-clang-and-more.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is LLVM? The power behind Swift, Rust, Clang, and more&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.gopheracademy.com/advent-2018/llvm-ir-and-go/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LLVM IR and Go&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
