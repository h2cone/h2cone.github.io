<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>database on Huangh&#39;s blog</title>
        <link>https://h2cone.github.io/tags/database/</link>
        <description>Recent content in database on Huangh&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 11 Jul 2020 11:21:03 +0800</lastBuildDate><atom:link href="https://h2cone.github.io/tags/database/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>从 MySQL 到 TiDB</title>
        <link>https://h2cone.github.io/2020/07/11/from-mysql-to-tidb/</link>
        <pubDate>Sat, 11 Jul 2020 11:21:03 +0800</pubDate>
        
        <guid>https://h2cone.github.io/2020/07/11/from-mysql-to-tidb/</guid>
        <description>&lt;h2 id=&#34;mysql-窘境&#34;&gt;MySQL 窘境&lt;/h2&gt;
&lt;h3 id=&#34;扩展&#34;&gt;扩展&lt;/h3&gt;
&lt;p&gt;数据以前所未有的速度增长，例如从 GB 到 TB，甚至到 PB；负载增加，例如单位时间请求数、I/O 次数、活跃用户数激增；这可能引起单机 MySQL server 性能下降，甚至不可用。我们想尽办法扩展 MySQL，通常，要么采购更强大的机器作为数据库服务器，这是一种&lt;strong&gt;纵向扩展（scale up）&lt;/strong&gt;；要么对 MySQL 的库或表进行分片（MySQL Sharding），即将数据集分离得到多个子数据集，任意两个子数据集可能存储在同一台机器上，也可能存储在不同机器上，这是一种&lt;strong&gt;横向扩展（scale out）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;纵向扩展需要应对一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;成本增长过快。如果把一台机器的 CPU 核数增加一倍，主存和磁盘各扩容一倍，则最终总成本增加不止一倍。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预见性能瓶颈。一台机器尽管拥有两倍的硬件指标但却不一定能处理两倍的负载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有限容错能力。显然无法提供异地容错能力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;横向扩展一般不需要高端的硬件或机器，但需要多台一般的机器和应对分布式系统的许多挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;故障与部分失效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不可靠的网络。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不可靠的时钟。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为关心系统&lt;strong&gt;应对负载增加的能力（可扩展性）&lt;/strong&gt;，所以关心系统&lt;strong&gt;容错能力（可用性与一致性）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;达成以上目标至少需要分区，对于 Elasticsearch 和 SolrCloud 以及 MongoDB 来说是 shard；对于 Cassandra 和 HBase 分别是 vnode 和 region。&lt;/p&gt;
&lt;h3 id=&#34;为什么分区&#34;&gt;为什么分区&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;增强可扩展性。海量数据分布在更多磁盘上，查询负载分布到更多处理器上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分区容错。&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Partition_%28database%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据分区&lt;/a&gt;与&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Replication_%28computing%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据复制&lt;/a&gt;通常结合使用，即每个分区在多个结点上存有&lt;strong&gt;副本（replica）&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://h2cone.github.io/img/database-system/data-partition.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;data-partition&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;副本的优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;容错。容忍结点失效，支持故障转移。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;横向扩展。采用多结点来处理更多的请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;就近访问。将副本部署到距离用户更近的地方。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;partitioning&#34;&gt;Partitioning&lt;/h3&gt;
&lt;p&gt;项目开始初期，什么情况下适合对 MySQL 分库分表？&lt;a class=&#34;link&#34; href=&#34;https://github.com/alibaba/p3c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;阿里巴巴 Java 开发手册&lt;/a&gt;在“MySQL 数据库“章节中有一则推荐，仅供参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【推荐】单表行数超过 500 万行或者单表容量超过 2 GB，才推荐进行分库分表。
说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们通常使用垂直分区（vertical partitioning）和水平分区（horizontal partitioning），如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://h2cone.github.io/img/database-system/DB_image_1_cropped.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;DB_image_1_cropped&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;VP1 和 VP2 表现得像两张可通过 ID 关联起来的表，HP1 和 HP2 的 scheme 和列（columns）相同，但行（rows）不同。行的增长速度通常快于列的增长速度，我们更关注水平分区，&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Shard_%28database_architecture%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据库分片&lt;/a&gt;是数据库或搜索引擎的水平分区；但新问题随之而来：假设 HP1、HP2、HP3、HP4&amp;hellip;&amp;hellip; 包含了多张表的数据，且由多个 MySQL server 维护，如果客户端要查找满足给定条件的一行或多行记录，那么它应该向哪个或哪些 MySQL server 发起请求？如何合并多个结点返回的结果集？如何执行跨分区 JOIN、排序、分页、分组等操作？如何保证分布式事务？&lt;/p&gt;
&lt;p&gt;在以前，上面问题的解决方案常常是数据库&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Middleware&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;中间件&lt;/a&gt;，数据库中间件的设计模式至少有两种，&lt;strong&gt;Proxy&lt;/strong&gt; 和 &lt;strong&gt;Smart Client&lt;/strong&gt;。Proxy 是应用程序与数据库集群的中间层，它对客户端制造了单一数据库实例的假象，客户端发送到 Proxy 的请求将由 Proxy 分发给下层的数据库服务器；Smart Client 是与应用程序集成的库或框架，客户端向数据库集群发起的请求将由客户端路由。两者的图像可参考&lt;a class=&#34;link&#34; href=&#34;https://h2cone.github.io/post/2020/03/24/distributed-cache/#%E4%BB%A3%E7%90%86%E5%88%86%E5%8F%91&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;代理分发&lt;/a&gt;和&lt;a class=&#34;link&#34; href=&#34;https://h2cone.github.io/post/2020/03/24/distributed-cache/#%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B7%AF%E7%94%B1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;客户端路由&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;目前，开源且较活跃的数据库中间件有 &lt;a class=&#34;link&#34; href=&#34;https://github.com/apache/shardingsphere&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ShardingSphere&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://github.com/MyCATApache/Mycat-Server&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MyCAT&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://github.com/vitessio/vitess&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;vitess&lt;/a&gt; 等等，一直以来勉强可用，但是前两者的缺点也不容忽视：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;侵入性。要求用户指定 shard key 和其它分片配置；如果原业务逻辑包含 JOIN、subquery 等复杂 SQL，改动工作量可能难以估计。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不支持透明分片。维护分片或集群的代价随着结点的增多而非线性增长。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;暂不支持&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Autoscaling&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;弹性伸缩&lt;/a&gt;。据说都还在开发中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复杂查询优化能力较弱。不能生成最优的执行计划（plan），许多优化工作推卸给应用程序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何将原始表（orginal table）的记录分配给多个 MySQL server（实例、进程）？数据库中间件是应用程序级别的实现，&lt;a class=&#34;link&#34; href=&#34;https://www.mysql.com/products/cluster/scalability.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL Cluster&lt;/a&gt; 则是数据库级别的实现，它声称支持跨结点自动分片（分区），可是它是通过 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/NDB_Cluster&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NDB&lt;/a&gt; 存储引擎实现的，不温不火。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://h2cone.github.io/img/mysql/MySQL_Cluster_Scalability_v1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;MySQL_Cluster_Scalability_v1&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;主从复制&#34;&gt;主从复制&lt;/h3&gt;
&lt;p&gt;MySQL 的数据复制模型是&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Master/slave_%28technology%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;主从&lt;/a&gt;复制。传统主从复制图像：主结点（主副本、主库）处理读/写请求，若是写请求则通过同步复制或异步复制将&lt;strong&gt;数据变更日志&lt;/strong&gt;（事件或日志记录）发送到所有从结点（从副本、从库），从结点按照日志（日志记录或事件）写副本；一般情况，从结点只读，故障转移时从结点可提升为主结点。传统的同步复制侧重&lt;strong&gt;一致性&lt;/strong&gt;，要求”短暂“的不可用，主结点需要等待从结点的确认；传统的异步复制侧重&lt;strong&gt;可用性&lt;/strong&gt;，要求“短暂”的不一致，从结点滞后于主结点。&lt;/p&gt;
&lt;p&gt;如果把所有从结点配置为同步复制模式，那么任何失效或性能下降的从结点会导致系统阻塞。MySQL 支持设置&lt;strong&gt;半同步&lt;/strong&gt;模式，某一个从结点配置为同步模式，其它从结点配置为异步模式；当同步模式的从结点失效时，另一个从结点从异步模式提升为同步模式，这么做的好处之一是保证至少有两个结点（主结点和同步模式的从结点）拥有最新的数据副本。半同步并非高枕无忧，微信后台团队在 &lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/3DeXEd2ZjjutxRyo_3coaQ&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL 半同步复制的数据一致性探讨&lt;/a&gt;中总结了 MySQL 的半同步复制和 Master 切换都存在一些不足，数据复制存在回滚难题，Master 切换存在多 Master 难题。&lt;/p&gt;
&lt;p&gt;主从复制模型不能保证同时满足强一致性和高可用性。如果出现结点失效、网络中断、延迟抖动等情况，多主结点复制方案会更加可靠，但是代价则是系统的高复杂度和弱一致性保证。多主结点复制适用于多数据中心，每个数据中心采用常规的主从复制方案，各个数据中心的主结点负责与其它数据中心的主结点交换 replicated log。&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;面对&lt;strong&gt;透明分片（transparent sharding）&lt;/strong&gt;、&lt;strong&gt;弹性伸缩（auto-scaling）&lt;/strong&gt;、&lt;strong&gt;自动恢复（auto-failover）&lt;/strong&gt;、&lt;strong&gt;异地多活（multi-data center）～&lt;/strong&gt;等需求，传统的解决方案使我们陷入窘境。&lt;/p&gt;
&lt;h2 id=&#34;sql-和-nosql&#34;&gt;SQL 和 NoSQL&lt;/h2&gt;
&lt;h3 id=&#34;acid-和-base&#34;&gt;ACID 和 BASE&lt;/h3&gt;
&lt;p&gt;为什么不使用 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/NoSQL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NoSQL&lt;/a&gt; 数据库代替 MySQL 数据库呢？假设我们有了大刀阔斧迁移数据和重写应用程序的决心（基本不可能），但是许多 NoSQL 数据库都牺牲了一致性，而倾向于可用性，这种一致性模型往往被称为 BASE：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本可用性（Basically Available）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软状态（Soft state）。类似中间状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最终一致性（Eventual consistency）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BASE 模凌两可，太长或永远不一致的系统基本不可用。许多处理重要数据的系统（例如，财务、订单、互联网金融系统等）随着快速增长的数据和负载，常规的&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Relational_database&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;关系数据库&lt;/a&gt;扩展困难，而对于 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/ACID&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ACID&lt;/a&gt; ，特别是一致性的要求，NoSQL 数据库难以满足。相较于 BASE 的承诺，关系数据库的 ACID 的承诺是五十步笑百步（一致性往往推卸给应用程序）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原子性（Atomicity）。事务中的操作序列，要么全部执行完成（提交），要么全部不执行（回滚）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一致性（Consistency）。不蕴含矛盾，逻辑自洽&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隔离性（Isolation）。同时运行的事务不应相互干扰，事务提交时，其结果与串行执行完全相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;持久性（Durability）。无完美或绝对的保证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据模型与查询语言&#34;&gt;数据模型与查询语言&lt;/h3&gt;
&lt;p&gt;NoSQL 数据库缺乏 JOIN 的能力，这是其文档模型的限制。关系数据库市场占有率一直居高不下，参考 &lt;a class=&#34;link&#34; href=&#34;https://db-engines.com/en/ranking&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DB-Engines Ranking&lt;/a&gt;，原因之一是 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/SQL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SQL&lt;/a&gt;（DDL、DML、DQL、DCL） 是&lt;strong&gt;声明式&lt;/strong&gt;语言的代表，它的简单与统一在于&lt;strong&gt;指定结果所满足的模式&lt;/strong&gt;，在不改变语句的前提下，查询优化器或底层引擎的迭代更新就有可能显著提高性能。&lt;/p&gt;
&lt;p&gt;SQL 的&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Relational_model&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;关系模型&lt;/a&gt;理论足够优雅：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;关系是&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Cartesian_product&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;笛卡尔积&lt;/a&gt;的一个子集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系（表）是元组（行）的集合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系（表）经过运算以后，如 SELECT、JOIN、WHERE、交、并、差（&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Relational_algebra&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;关系代数&lt;/a&gt;），结果还是一个关系（表）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://h2cone.github.io/img/database-system/1920px-Cartesian_Product_qtl1.svg.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1920px-Cartesian_Product_qtl1&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;近年来，流行开源组件提供类 SQL 的趋势越来越明显，例如 &lt;a class=&#34;link&#34; href=&#34;https://spark.apache.org/sql/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spark SQL&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://www.confluent.io/blog/ksql-streaming-sql-for-apache-kafka/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KSQL&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sql/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flink SQL&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://clickhouse.tech/docs/en/sql-reference/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ClickHouse SQL&lt;/a&gt;&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;newsql-新在哪&#34;&gt;NewSQL 新在哪&lt;/h2&gt;
&lt;p&gt;NewSQL 是一类关系数据库系统，旨在为 OLTP 提供 NoSQL 数据库系统的可扩展性，同时提供传统关系数据库系统的 ACID 保证。&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Online_transaction_processing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OLTP&lt;/a&gt; 与 OLAP 有时区分并不是那么明显，前者侧重 T（事务），后者侧重 A（分析）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://h2cone.github.io/img/database-system/OLTP%e4%b8%8eOLAP.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;OLTP与OLAP&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;NewSQL 数据库系统新在架构、存储引擎、共识算法。&lt;/p&gt;
&lt;h2 id=&#34;你好-tidb&#34;&gt;你好 TiDB&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/pingcap/tidb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TiDB&lt;/a&gt; 项目受到了 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Spanner_%28database%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spanner/F1&lt;/a&gt; 与 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Raft_%28computer_science%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Raft&lt;/a&gt; 的启发，&lt;a class=&#34;link&#34; href=&#34;https://github.com/tikv/tikv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TiKV&lt;/a&gt; 对应的是 Spanner，TiDB 对应的是 F1，详情请看 &lt;a class=&#34;link&#34; href=&#34;https://pingcap.com/docs-cn/stable/tidb-architecture&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TiDB 整体架构&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://pingcap.com/docs-cn/stable/tidb-storage&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TiDB 数据库的存储&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://pingcap.com/docs-cn/stable/tidb-computing/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TiDB 数据库的计算&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://pingcap.com/docs-cn/stable/tidb-scheduling/#%E8%B0%83%E5%BA%A6%E6%A6%82%E8%BF%B0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;调度概述&lt;/a&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://h2cone.github.io/img/tidb/tidb-overview.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tidb-overview&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;SQL Layer 无状态，可以通过负载均衡组件（如 LVS、&lt;a class=&#34;link&#34; href=&#34;https://pingcap.com/docs-cn/dev/best-practices/haproxy-best-practices&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HAProxy&lt;/a&gt;、F5）对外提供统一的接入地址。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tiup playground v4.0.0 --db &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; --kv &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; --pd &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; --monitor
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如上所示，使用 &lt;a class=&#34;link&#34; href=&#34;https://github.com/pingcap/tiup&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tiup&lt;/a&gt; 启动了 3 个 TiDB 实例和 4 个 TiKV 实例以及 3 个 PD 实例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Waiting &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; tikv 127.0.0.1:20160 ready
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Waiting &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; tikv 127.0.0.1:20161 ready
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Waiting &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; tikv 127.0.0.1:20162 ready
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Waiting &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; tikv 127.0.0.1:20163 ready
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CLUSTER START SUCCESSFULLY, Enjoy it ^-^
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;To connect TiDB: mysql --host 127.0.0.1 --port &lt;span class=&#34;m&#34;&gt;4000&lt;/span&gt; -u root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;To connect TiDB: mysql --host 127.0.0.1 --port &lt;span class=&#34;m&#34;&gt;4001&lt;/span&gt; -u root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;To connect TiDB: mysql --host 127.0.0.1 --port &lt;span class=&#34;m&#34;&gt;4002&lt;/span&gt; -u root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;To view the dashboard: http://127.0.0.1:2379/dashboard
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;To view the monitor: http://127.0.0.1:9090
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;TiDB 非常友好地兼容了 MySQL 5.7 协议，从 MySQL 迁移到 TiDB 对应用程序无限接近零侵入。这里我们可以通过 MySQL 命令行工具连接某一个 TiDB 实例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;% mysql --host 127.0.0.1 --port &lt;span class=&#34;m&#34;&gt;4000&lt;/span&gt; -u root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Welcome to the MySQL monitor.  Commands end with &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; or &lt;span class=&#34;se&#34;&gt;\g&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Your MySQL connection id is &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server version: 5.7.25-TiDB-v4.0.0 TiDB Server &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Apache License 2.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; Community Edition, MySQL 5.7 compatible
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Copyright &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; 2000, 2020, Oracle and/or its affiliates. All rights reserved.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Oracle is a registered trademark of Oracle Corporation and/or its
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;affiliates. Other names may be trademarks of their respective
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;owners.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Type &lt;span class=&#34;s1&#34;&gt;&amp;#39;help;&amp;#39;&lt;/span&gt; or &lt;span class=&#34;s1&#34;&gt;&amp;#39;\h&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; help. Type &lt;span class=&#34;s1&#34;&gt;&amp;#39;\c&amp;#39;&lt;/span&gt; to clear the current input statement.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mysql&amp;gt; show databases&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Database           &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; INFORMATION_SCHEMA &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; METRICS_SCHEMA     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; PERFORMANCE_SCHEMA &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; mysql              &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;               &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; rows in &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.00 sec&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;导入&lt;a class=&#34;link&#34; href=&#34;https://github.com/datacharmer/test_db&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;样本数据集&lt;/a&gt;到某一个 TiDB 实例，样本数据集的 database 名称为 employees。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;% mysql --host 127.0.0.1 --port &lt;span class=&#34;m&#34;&gt;4001&lt;/span&gt; -u root &amp;lt; employees.sql
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CREATING DATABASE STRUCTURE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;storage engine: InnoDB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LOADING departments
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LOADING employees
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LOADING dept_emp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LOADING dept_manager
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LOADING titles
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LOADING salaries
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;data_load_time_diff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NULL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们会发现，连接任意一个 TiDB 实例都能观察到 employees 库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mysql&amp;gt; show tables from employees&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+----------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Tables_in_employees  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+----------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; current_dept_emp     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; departments          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; dept_emp             &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; dept_emp_latest_date &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; dept_manager         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; employees            &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; salaries             &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; titles               &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+----------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; rows in &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.00 sec&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;TiKV 数据分区的术语是 Region，使用 Raft 对写入数据在多个 TiKV 结点（实例）之间自动分片和复制日志，每个 Region 的所有副本（默认为三副本）组成一个 Raft Group，每个 TiKV 实例（结点）负责多个 Region。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://h2cone.github.io/img/tidb/tikv-overview.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tikv-overview.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pingcap.com/docs-cn/stable/multi-data-centers-in-one-city-deployment/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;同城多数据中心部署&lt;/a&gt;和&lt;a class=&#34;link&#34; href=&#34;https://pingcap.com/docs-cn/stable/three-data-centers-in-two-cities-deployment&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;两地三中心部署&lt;/a&gt;则提供了更强大的容错（容灾）能力。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文首发于 &lt;a class=&#34;link&#34; href=&#34;https://h2cone.github.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://h2cone.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://dataintensive.net&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Designing Data-Intensive Applications&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.digitalocean.com/community/tutorials/understanding-database-sharding&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Understanding Database Sharding&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650519118&amp;amp;idx=1&amp;amp;sn=fc4b92154cb9ab6dcec5b5544c6274aa&amp;amp;chksm=8780b18ab0f7389c1bde56b5adfce265779a58314ef77b7645b1f189f2ba11691fac7d827894&amp;amp;scene=158#rd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;“分库分表&amp;quot; ？选型和流程要慎重，否则会失控&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://dev.mysql.com/doc/refman/5.7/en/replication-implementation.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MySQL 5.7 Reference Manual # Replication Implementation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.guru99.com/sql-vs-nosql.html#:~:text=SQL%20databases%20are%20table%20based,dynamic%20schema%20for%20unstructured%20data.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SQL vs NoSQL: What&amp;rsquo;s the difference?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/NewSQL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wiki # NewSQL&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Shared-nothing_architecture&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Shared-nothing architecture&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pingcap.com/blog-cn/talk-tidb-pattern&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;演讲实录|黄东旭：分布式数据库模式与反模式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pingcap.com/blog-cn/how-do-we-build-tidb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How do we build TiDB&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pingcap.com/blog-cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PingCAP blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.pingcap.com/zh/tidb/v4.0/quick-start-with-tidb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TiDB 数据库快速上手指南&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.pingcap.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PingCAP docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
