<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Huangh&#39;s blog</title>
    <link>https://h2cone.github.io/tags/java/</link>
    <description>Recent content in java on Huangh&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Huangh&#39;s blog</copyright>
    <lastBuildDate>Sat, 18 Nov 2023 23:39:26 +0800</lastBuildDate><atom:link href="https://h2cone.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>造你自己的 GraalVM Native Image 命令行应用</title>
      <link>https://h2cone.github.io/2023/11/18/your-own-graalvm-native-image-cli-app/</link>
      <pubDate>Sat, 18 Nov 2023 23:39:26 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2023/11/18/your-own-graalvm-native-image-cli-app/</guid>
      <description>写在前面 云原生声量最大的一段时间里 Java 时常被人诟病应用启动速度太慢了，而且占用内存也很大，由于云原生应用目标包括快速启动、快速响应、快速扩容、快速收缩，因此 Java 一直被认为不适合云原生应用。但是，随着 GraalVM 的曝光，这个问题得到了部分解决，GraalVM 可以将 Java 应用编译成本地可执行文件，它被称为 Native Image，这样就不需要安装 Java 运行时（JRE）了，直接运行即可。
最早体验到 Native Image 是通过 Quarkus 与 Picocli 开发一些命令行应用（CLI App），个人感觉针对不同的平台打包出不同的二进制文件的编译和部署成本比 Go/Rust/Node.js 语言都高，Native Image 的限制也比较多，比如反射、动态代理、动态类加载等，不得不以声明式告诉 GraalVM 哪些类有哪些动态行为。后来 Spring Boot 也支持了 Native Image，那些老毛病健在，只不过生态规模更大罢了。
GraalVM 能显著提升 Java 应用程序的性能还是挺可信的，比如 GraalVM for JDK 21 is here! 和 Migrating 10MinuteMail from Java to GraalVM Native，尤其相较于传统 JVM 应用的这两个指标：
 启动时间 startup time 单位时间与内存的吞吐量 requests/GB-s  先决条件  安装 Java 21 或更高版本，现在挺流行使用 SDKMAN! 安装和管理多版本 JDK，我习惯在 Download Azul JDKs 下载 OpenJDK。  在 Windows 平台，在 WSL 之外，也可以只通过类似于 alias 的别名动态切换 JDK 版本，比如编辑 PowerShell 的 $profile 指向的文件：  # reload env path Function Refresh { $env:Path = [System.</description>
    </item>
    
    <item>
      <title>虚拟线程速览</title>
      <link>https://h2cone.github.io/2023/09/26/a-quick-look-at-virtual-threads/</link>
      <pubDate>Tue, 26 Sep 2023 22:32:39 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2023/09/26/a-quick-look-at-virtual-threads/</guid>
      <description>为了解决什么问题？ 围绕 I/O 为核心的单机任务，难点之一是权衡应对负载增加的能力和开发的难易程度，从 网络·NIO 中我们可以看到，Blocking I/O 优点是概念简单，缺点是在 I/O 操作完成之前，线程将无法执行任何其他操作，另外一点容易忽视的是它经过 Java 堆复制数据；Java NIO 劣势是概念较复杂（考虑异步容易出错），优势是支持非阻塞 I/O 和分配直接内存。一般情况下，基于 NIO 的服务比基于 BIO 的服务性能表现更好，但阻塞式 I/O 对广大开发者的心智负担更低。
使用非阻塞 I/O 模型难以避免引入异步编程或响应式编程，而这些范式对于开发者来说是一种挑战，因此许多主流语言都提供了将单线程阻塞式代码转化为异步、非阻塞式代码的语法糖，比如 C#/JavaScript 的 async/await：
 让出（yield）控制权给调用者线程。 尝试隐藏异步调用与同步调用的差异，使其看起来像同步代码那样简单。 是通过编译器自动将 async 方法转换为状态机来实现的。  详情参考 Task asynchronous programming model，随着越来越多的异步“传染”程序代码，性能提高代价可能是越来越难以推理代码。由于各种各样的原因，Java 官方没走 async/await 的道路，而是选择了类似于 Go/Kotlin 协程 的“绿色线程”。所谓“绿色”是相对于 OS 线程而言，其中 Java 的线程瓶颈尤为严重，已知 1 线程需要大小 1MB 的栈，那么 10000 线程大约消费 10 GB 内存，这类来自 OS 的瓶颈促使开发人员考虑线程池技术。随着负载的增加，Java 线程池的扩展又是一大挑战，官方正式推出的挑战者是虚拟线程。
“每线程一请求”的崛起？ ExecutorService executor = Executors.newThreadPerTaskExecutor(Thread.ofVirtual().name(&amp;#34;my-thread&amp;#34;, 0).factory()); @Override public void run() { try (ServerSocket serverSocket = new ServerSocket(port)) { while (!</description>
    </item>
    
    <item>
      <title>通过 Azure OpenAI API 接入 ChatGPT</title>
      <link>https://h2cone.github.io/2023/04/26/azure_openai_api_0/</link>
      <pubDate>Wed, 26 Apr 2023 13:54:13 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2023/04/26/azure_openai_api_0/</guid>
      <description>写在前面 上个月参与公司将 LLM 应用到基于 Spring Boot 的业务系统差事：接入 ChatGPT。
Azure OpenAI Service  Azure OpenAI 服务允许通过 REST API 访问 OpenAI 的强大语言模型，包括 GPT-3、Codex 和 Embeddings 模型系列。 这些模型可以轻松适应特定的任务，包括但不限于内容生成、汇总、语义搜索和自然语言到代码的转换。用户可以通过 REST API、Python SDK 或 Azure OpenAI Studio 中基于 Web 的界面访问该服务。
 使用 Azure OpenAI 服务在大部分情况下不需要代理，无严格网络封锁。
依赖库 后端  TheoKanning/openai-java。Java 中的 OpenAI GPT-3 API 客户端。 knuddelsgmbh/jtokkit。JTokkit 是一个 Java 分词器库，设计用于 OpenAI 模型。  前端  mpetazzoni/sse.js。一个灵活的 JavaScript SSE 库。  认证 与 OpenAI API 的 header 要求包含 Authorization: Bearer $OPENAI_API_KEY 不同的是，Azure OpenAI API 的 header 要求包含 api-key: $OPENAI_API_KEY，详情参考 Azure OpenAI Service REST API reference。</description>
    </item>
    
    <item>
      <title>正则表达式用例</title>
      <link>https://h2cone.github.io/2022/07/15/regex_use_cases/</link>
      <pubDate>Fri, 15 Jul 2022 10:31:49 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2022/07/15/regex_use_cases/</guid>
      <description>前言 正则表达式是指定文本中搜索模式的字符序列，这种模式被字符串搜索算法用于对字符串进行查找、替换、校验等。
拆分 在日志解析领域，时常遇到满足特定模式的日志条目，比如“头部”是时间信息，“身体”是详细信息的日志条目：
% cat a0.log &amp;lt;30&amp;gt;May 21 21:33:47 localhost alert: {category=漏洞扫描事件} {type=WebShell} {priority=提示} {typeCN=Web后门} {level=6} {id=974609} {time=2018-05-21 21:33:04} {sip=101.206.169.180} {sport=49187} {dip=10.1.186.7} {dport=9084} {host=m.****.com.cn:9084} {code=200} {sysurl=https://h2cone.github.io/sys/web_session.php?level=6&amp;amp;sid=974609} {attach=/sys/web_session.php?act=download&amp;amp;level=6&amp;amp;sid=974609} {intent=上传可执行脚本或WebShell文件} {detail=在Post数据包中发现含有JSP/ASP/ASP.NET代码特征的字符：&amp;lt;%request/QueryString/Form/[&amp;#39;...&amp;#39;]%&amp;gt;} {dev=zonghang01} {url=http://m.****.com.cn:9084/pmobile/MCPerEAccountSignTrs.do} 人脑能够从少量日志条目归纳出日志的格式，也能从程序开发者的角度看见日志的结构，但是计算机只有在人类的指导（声明字符串满足的模式）下才能区分日志条目的各个组成部分。
% cat a0.log | sd &amp;#39;(&amp;lt;\d+&amp;gt;\w+\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}\s+\w+\s+\w+:\s+)(.+)&amp;#39; &amp;#39;$1\n$2&amp;#39; &amp;lt;30&amp;gt;May 21 21:33:47 localhost alert: {category=漏洞扫描事件} {type=WebShell} {priority=提示} {typeCN=Web后门} {level=6} {id=974609} {time=2018-05-21 21:33:04} {sip=101.206.169.180} {sport=49187} {dip=10.1.186.7} {dport=9084} {host=m.****.com.cn:9084} {code=200} {sysurl=https://h2cone.github.io/sys/web_session.php?level=6&amp;amp;sid=974609} {attach=/sys/web_session.php?act=download&amp;amp;level=6&amp;amp;sid=974609} {intent=上传可执行脚本或WebShell文件} {detail=在Post数据包中发现含有JSP/ASP/ASP.NET代码特征的字符：&amp;lt;%request/QueryString/Form/[&amp;#39;...&amp;#39;]%&amp;gt;} {dev=zonghang01} {url=http://m.****.com.cn:9084/pmobile/MCPerEAccountSignTrs.do} 命令行工具 sd 用于在文本中查找与替换，它既支持基于字面量的查找，也支持基于正则表达式的查找。上文整条命令表示将文件 a1.log 输入到 sd，它第一个参数是替换前字符串满足的模式（正则表达式），第二个参数是替换后的字符串格式，从输出结果可以看到日志条目的“头部”和“身体”之间已通过行分隔符 \n 分隔，相当于拆分成两个部分。</description>
    </item>
    
    <item>
      <title>高吞吐 Kafka 客户端配置</title>
      <link>https://h2cone.github.io/2022/06/20/high_throughput_kafka_client_config/</link>
      <pubDate>Mon, 20 Jun 2022 10:16:16 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2022/06/20/high_throughput_kafka_client_config/</guid>
      <description>写在前面的话 团队围绕着 Kafka 一系列服务的压力测试的核心指标之一是 Eevents per second，排除其它因素，它与吞吐量正相关。
什么是吞吐量 吞吐量是指通过通信通道成功传递消息的速率。从 Kafka 生产者（Producer）的角度来看，可以用单位时间内交付成功的记录条数或大小来描述吞吐量；从 Kafka 消费者（Consumer）的角度来看，可以用单位时间内读取的记录条数或大小来描述。
生产者准备记录包含业务逻辑，此处只关注单位时间内接收到回执（ack）的记录条数或大小。默认情况下，生产者使用异步发送，且它将尝试在内存中累积记录并在单个请求中发送批量记录。
for (long i = 0; i &amp;lt; numRecords; i++) { producer.send(record, callback); } 调用方法 KafkaProducer.send(ProducerRecord, Callback) 不阻塞在该方法，既传递记录（record）的引用，也传递回调（callback）的引用。
class MyCallback implements Callback { @Override public void onCompletion(RecordMetadata metadata, Exception e) { // handling  } } 生产者接受到发送记录的回执时，将有线程执行方法 onCompletion 的代码，我们可以在回调方法体内实现记录条数或大小的累计。
注意：“提交偏移量”不一定发生在“处理记录”之后。
while (conditions) { ConsumerRecords records = consumer.poll(timeout); processRetrievedRecords(records); } 消费者处理记录包含业务逻辑，此处只关注单位时间内接受到的记录条数或大小。默认情况下，消费者通过轮询拉取（poll）批量的记录，每次调用方法 KafkaConsumer.poll(Duration) 阻塞在该方法，直到超时（timeout）返回，且会有线程定期透明地提交前一批的最后一条记录的偏移量（auto commit）。
测试吞吐量 生产者工具 在 Kafka 安装目录，有助于测试生产者性能的命令行工具是 kafka-producer-perf-test.</description>
    </item>
    
    <item>
      <title>Java 8 到 Java 17 的特性</title>
      <link>https://h2cone.github.io/2022/05/30/java8-java17/</link>
      <pubDate>Mon, 30 May 2022 10:37:32 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2022/05/30/java8-java17/</guid>
      <description>个人选择 公司中的遗留项目基于 Java 8，也有部署使用 Java 11 的开源软件；对于 Side Project，甚至是新项目，可以毫不犹豫使用 Java 11/17。个人嫌在 Oracle 官方下载 JDK 过于麻烦，也非 100% 开源，加上本地操作系统指令集架构从 x86 转到了 ARM，因此决定下载 Azul Zulu Builds of OpenJDK。
市面上各家厂商构建的 JDK 不可能毫无差异，比如 OpenJDK 与 Oracle JDK – 比较表。
向后兼容 Java 8 有时被称为 Java 1.8，在这之后的版本号不再以 1. 开头，随着发布时间的增加而增加，上图中只有 8、11、17 是 LTS 版本。
% java -version openjdk version &amp;#34;17.0.3&amp;#34; 2022-04-19 LTS OpenJDK Runtime Environment Zulu17.34+19-CA (build 17.0.3+7-LTS) OpenJDK 64-Bit Server VM Zulu17.34+19-CA (build 17.0.3+7-LTS, mixed mode, sharing) Java 版本之间破坏性变更较小，JVM 高度向后兼容，新版通常兼容旧版，例如基于 Java 5 或 Java 8 的程序，一般情况下，不更改代码也可以在 Java 8 到 Java 17 的 JVM 上运行正常；反过来说，不能向前兼容，例如使用 Java 17 编译输出的 Class 或 Jar 文件无法在 17 之前的 JVM 上加载通过：UnsupportedClassVersionError。</description>
    </item>
    
    <item>
      <title>优化过长的“分支代码”</title>
      <link>https://h2cone.github.io/2021/08/05/loop_or_strategy/</link>
      <pubDate>Thu, 05 Aug 2021 14:37:16 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2021/08/05/loop_or_strategy/</guid>
      <description>基于多态 假设有一段“分支代码”（片段 1）：
// 可能的 Case CaseEnum caseEnum = getRandomCase(); if (CaseEnum.AA.equals(caseEnum)) { // ... } else if (CaseEnum.BB.equals(caseEnum)) { // ... } else if (CaseEnum.CC.equals(caseEnum)) { // ... } 其等效代码类似于（片段 2）：
// 可能的 Case CaseEnum caseEnum = getRandomCase(); for (CaseHandler handler : caseHandlerFactory.getHandlers()) { if (handler.match(caseEnum)) { handler.handle(); break; } } 当增加分支的时候，片段 1 需要在尾部追加代码，而片段 2 无需变更，前提是片段 2 依赖更多的类。
注意：片段 2 在最坏情况下的运行时间的增长数量级是 N。
如何实现？
（一）CaseHandler。
public interface CaseHandler { /** * 匹配 Case。 * * @param caseEnum Case 枚举 * @return 是否 */ boolean match(CaseEnum caseEnum); /** * 业务处理。 */ void handle(); } （二）CaseHandler 实现之一。</description>
    </item>
    
    <item>
      <title>ElasticsearchRestTemplate 的一些坑</title>
      <link>https://h2cone.github.io/2021/07/26/elasticsearch_rest_template_pitfall/</link>
      <pubDate>Mon, 26 Jul 2021 11:05:02 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2021/07/26/elasticsearch_rest_template_pitfall/</guid>
      <description>基于日期的索引 预期单一索引增长速率较快，最终决定创建基于日期的索引（time-based indices），例如按月份分索引：
@Document(indexName = &amp;#34;my_index-#{@timeBasedIndexNameProvider.toMonth()}&amp;#34;, shards = 3) public class Entity { // ... } 其中 indexName 的值可包含 SpEL，引用了 TimeBasedIndexNameProvider 的 toMonth。
@Component(&amp;#34;timeBasedIndexNameProvider&amp;#34;) public class TimeBasedIndexNameProvider { public String toMonth() { return LocalDateTime.now().format(DateTimeFormatter.ofPattern(&amp;#34;yyyy-MM&amp;#34;)); } } 生成的一系列索引名形式如下：
 my_index-2021-07 my_index-2021-08 &amp;hellip;&amp;hellip;  保存实体时，当前月份的索引可能还未创建，如果直接使用 ElasticsearchRestTemplate 的 save 方法，当前版本并不会解析实体类的实例字段上标注的 Elasticsearch 相关注解，例如有一个字段（batchId）：
@Field(type = FieldType.Keyword) private String batchId; 这种情况下，自动创建的 my_index-* 的 Mapping 所包含的 batchId 类型是 Text，而不是预期的 Keyword。一般来说，在保存实体之前，先检测当前月份的索引是否存在，若不存在，则创建索引（包括 Mapping），否则直接保存实体。
void createIndexAndPutMapping(Class&amp;lt;T&amp;gt; entityClass) { IndexOperations ops = elasticsearchRestTemplate.</description>
    </item>
    
    <item>
      <title>Airflow 杂技</title>
      <link>https://h2cone.github.io/2021/05/01/airflow_trick/</link>
      <pubDate>Sat, 01 May 2021 18:12:03 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2021/05/01/airflow_trick/</guid>
      <description>背景 近期，从零开始搭建 SOAR 平台，其中工作流引擎或任务编排组件是核心组件之一。
Airflow Airflow 是用于描述、执行、监控工作流的平台。目前为止，启动 Airflow 最快的方式是——在 Docker 中运行 Airflow，这种安装方式也有利于可扩展性。
有一些组件需要说明一下（此处省略 Flower）：
 Webserver：提供访问 DAG、任务、变量、连接等等的状态信息的 Airflow REST API。 Scheduler：负责 DAG 解析与任务调度。 Worker：执行由 Scheduler 分配的任务。 Redis：Scheduler 与 Worker 之间的消息代理。 Postgres：存储有关 DAG、任务、变量、连接等等的状态信息。  上述组件是进程级组件，需要注意的是 DAGs 并不是进程，而是指多个 Python 源文件。DAG 是有向无环图（Directed Acyclic Graph）的缩写，从 Airflow 的角度来看，DAG 用于描述工作流，有向无环图中的结点被称为任务（Task），而 Task 是通过 Operator 来实现。DAGs 的位置在 Airflow 配置文件中指定，重要的事情是 Webserver 和 Scheduler 以及 Worker 都需要读取 DAGs。
生成 DAG 编写 DAG 需要一定的 Python 知识，甚至 Airflow 并不提供创建 DAG 的 UI 或 REST API。情理之中，Airflow 创建工作流并不包含“无代码”或“低代码”特性，从官方首页可以看到其定位：</description>
    </item>
    
    <item>
      <title>Vert.x 与 Hazelcast</title>
      <link>https://h2cone.github.io/2020/12/14/vertx-hazelcast-exp/</link>
      <pubDate>Mon, 14 Dec 2020 14:50:54 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2020/12/14/vertx-hazelcast-exp/</guid>
      <description>前面的话 有一个项目使用了 Vert.x 3，没想到 v4.0.0 已经发布。
什么是 Vert.x Vert.x 是用于在 JVM 上构建 Reactive 应用程序的工具包。
早在 2014 年反应式宣言就提出反应式（Reactive）应用程序/软件系统应具有反应灵敏（Responsive）、回弹性（Resilient）、弹性（Elastic）、消息驱动（Message Driven）等特征，这些莫名其妙的要求可以归属于前文常常提到的软件系统三大目标。
Vert.x 受到了 Node.js 启发，推荐的编程范式是事件驱动，事件可以由软件、用户、系统产生或触发，处理事件的函数通常被称为 Event Handler。
import io.vertx.core.AbstractVerticle; public class Server extends AbstractVerticle { public void start() { vertx.createHttpServer().requestHandler(req -&amp;gt; { req.response() .putHeader(&amp;#34;content-type&amp;#34;, &amp;#34;text/plain&amp;#34;) .end(&amp;#34;Hello from Vert.x!&amp;#34;); }).listen(8080); } } 如上所示，使用 Vert.x 编写一个简单的 HTTP Server，其中 requestHandler 方法传入了用于处理请求事件的 Handler，Handler 表现为回调函数，即 Call­back；其中 listen 方法是非阻塞方法，线程调用非阻塞方法不会被阻塞在该方法，而是继续执行其它代码；非阻塞函数有时被称为异步函数，返回值可以被称为异步结果，仅使用 Callback 处理异步结果可能导致嵌套和凌乱的代码，被称为回调地狱。Vert.x 支持 Fu­tures/Promises 和 RxJava，前者用于优雅地链式异步操作，后者用于高级反应式编程。
Vert.x 的非阻塞 I/O 基于 Netty，在此之上构建 Vert.</description>
    </item>
    
    <item>
      <title>Goodbye Spring</title>
      <link>https://h2cone.github.io/2020/06/04/goodbye-spring/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:24 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2020/06/04/goodbye-spring/</guid>
      <description>图片来自网络  本文首发于 https://h2cone.github.io/
 </description>
    </item>
    
    <item>
      <title>网络·NIO</title>
      <link>https://h2cone.github.io/2020/03/08/network_nio/</link>
      <pubDate>Sun, 08 Mar 2020 11:07:41 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2020/03/08/network_nio/</guid>
      <description>I/O 本文以多线程·并发编程中的第一张图作为开篇：
 I/O 设备包括鼠标、键盘、显示器、磁盘、网卡等。 I/O（输入/输出），输入是从 I/O 设备复制数据到主存，输出是从主存复制数据到 I/O 设备。  从一个计算机角度来看，网络（适配器）是它的一个 I/O 设备。当计算机系统从主存复制字节序列到网络适配器时，数据流经过网络到达另一台机器，同理，计算机系统可以从网络适配器复制字节序列到主存。
Socket 从人类的角度来看，计算机网络由一台或多台机器组成。网络中，数据从一台机器传输到另一个机器的方式通常是分组交换，即数据被切分成适合传输的小块数据，小块数据都有各自的编号；它们从一个端点分道扬镳，但殊途同归，到另一个端点时，重新排列组合成完整数据。分组交换的好处之一是充分利用网络带宽，而当 TCP 连接空闲时，通常不占用任何带宽。
分组交换有可能出现数据的丢失、乱序、重复，如何检测、重传、缓存，实现可靠性传输是 TCP 的目标。别问，问就是三次握手、四次挥手、滑动窗口协议、拥塞控制算法&amp;hellip;&amp;hellip;
TCP/IP 协议族对普通程序员来说足够复杂，但是，David Wheeler 曾经说过：
 All problems in computer science can be solved by another level of indirection.
  Socket 是进程与传输层的中间层。 Socket 包含五元组 (client ip, client port, server ip, server port, protocol)。  同在传输层的 UDP 不如 TCP 可靠，但是轻量级，因为它没有确认、超时、重传的概念，也没有拥塞控制，而且无连接，从而能广播。
Socket 隐藏了下层具体实现的复杂性，并给上层提供了简单或统一的 API。下图是 TCP Socket 基本流程，使用 伯克利 Sockets 描述。
Unix 的主题是“一切都是文件”。当进程申请访问 Socket 时，内核则提供相应的文件描述符（int 变量），进程发起系统调用并传递相应的文件描述符来读写 Socket。</description>
    </item>
    
    <item>
      <title>多线程·并发编程</title>
      <link>https://h2cone.github.io/2020/02/21/thread_concurrent/</link>
      <pubDate>Fri, 21 Feb 2020 17:47:30 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2020/02/21/thread_concurrent/</guid>
      <description>进程与线程 现代的计算机系统提供了许多漂亮的抽象，如下图所示：
其中，进程是对处理器、主存和 I/O 设备的抽象，换言之，进程是操作系统对一个正在运行的程序的一种抽象。操作系统上可以“同时”运行多个进程，已经对一边听歌一边写代码和接收消息的流畅不足为奇，之所以用双引号，因为这可能是一种假象。
大多数计算机系统中，需要运行的进程数是多于可以运行它们的 CPU 个数的，那么所谓的”同时“运行，很有可能是模拟并发的假象；也就是说一个进程的指令和另一个进程的指令是被 CPU 交错执行的，而且 CPU 在进程间切换足够快，进程“暂停”和“恢复”的间隔也足够短，每个进程看上去像是连续运行。除非有多个 CPU 或多处理器的计算机系统，才能支持多进程并行，即处理器同时执行多个程序的指令。
一个进程用完了操作系统分配给它的时间片，操作系统决定把控制权转移给新的进程，就会进行上下文切换（context switch），即保存当前进程的状态，恢复目标进程的状态，交接控制权。这种状态被称为上下文（context），比如程序计数器和寄存器的当前值以及主存的内容。
一个进程可以存在多个控制流（control flow），它们被称为线程。如来自维基百科线程词条的插图所示：
因为只有单处理器，所以这个进程的两个线程轮番运行在进程的上下文中（模拟并发）。操作系统不仅调度进程，教科书常说，线程是操作系统调度的最小单位。大多数计算机系统中，需要运行的线程数大于可以运行它们的 CPU 核数，从单线程进程推广到多线程进程的线程，一个线程时间到了，上下文切换，它被“暂停”了，轮到了另一个线程运行，稍后轮到它时又“恢复”了。
多线程程序十分普遍。电脑和手机应用程序在用户界面渲染动画，同时在后台执行计算和网络请求。一个 Web 服务器一次处理数千个客户端的请求。多线程下载、多线程爬虫、多线程遍历文件树&amp;hellip;&amp;hellip;多线程成为越来越重要的模型，因为多线程程序有不少优点。
多线程之间比多进程之间更容易共享数据和通信。同一个进程的多个线程共享进程的资源，比如进程的虚拟地址空间中的程序代码和程序处理的数据以及文件，对于同一进程的线程们来说，可执行代码只有一套，它们可以访问存储在堆 (Heap) 中的共享变量或全局变量，但是，栈（Stack）、包括程序计数器（Program Counter）在内的寄存器（Register）副本、线程本地存储（Thread Local Storage）都是线程私有的（如果有的话）。不仅如此，线程之间可以通过共享的代码、数据、文件进行通信，绝大部分情况下比进程间的通信更高效。
多线程执行任务更多或更快。如果主线程阻塞在耗时任务，整个程序可能会卡顿或长时间无响应，解决办法之一便是新建一个工作线程专门执行这个耗时任务，而主线程则继续执行其它任务。例如，前面提到的手机 APP（特别是 Android APP），UI 线程被阻塞后很有可能无法正常人机交互了，用户体验极差。更进一步，单进程的多线程之间的协作有可能提高 client-server 系统的性能，譬如异步调用缩短了请求响应时间（也许总延迟几乎没变）。最重要的是，虽然一个传统的 CPU 只能交错执行一个进程的多个线程，但随着多核处理器和超线程（hyperthreading）的普及，面对多任务或大任务的执行，多线程程序的性能上限具有更高的天花板，因为减少了执行多个任务需要模拟并发的开销，还因为处理器可以并行运行多个线程。
并发与并行 并发（Concurrency）和并行（Parallelism）这两个术语经常混淆，语义应当结合语境。
如上图所示，假设有两个任务和两个线程，每个任务只能由一线程执行且用时分别是 t1 和 t2（t1 &amp;lt; t2），且线程都是同时启动，那么各个方式总执行时间可能如下表所示：
   方式 总执行时间     串行 t1 + t2   并行 t2   单处理器并发 t1 + t2 + 上下文切换总时间    由此可见，如果上下文切换的耗时可以忽略不计，单处理器并发不仅执行总时间近似于串行执行总时间，还有一个优点是同时执行两个任务的假象。并行的方式非常快，但也取决于最耗时的任务。</description>
    </item>
    
    <item>
      <title>造你自己的 MyBatis 插件</title>
      <link>https://h2cone.github.io/2020/02/08/your-own-mybatis-interceptor/</link>
      <pubDate>Sat, 08 Feb 2020 18:28:19 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2020/02/08/your-own-mybatis-interceptor/</guid>
      <description>插件 我们早已知道 MyBatis 自身支持客户端分页（RowBounds）, 即从数据库获取全部目标数据，在内存中对结果集进行分页，虽然适用于不同数据库，但是数据量足够大时 Java 程序可能发生内存溢出；若采用数据库服务器端分页，即从数据库获取部分目标数据，例如向 MySQL 数据库发送使用了 LIMIT 或 OFFSET关键词的 SQL，还挺简单，可是直接使用 MyBatis 做数据库分页仍然有一些痛点：
 重复编写分页、求总记录数、排序语句。 语法不同，不适用于其它数据库。  那不如改用 Hibernate ？还真不一定，国人偏爱 MyBatis，以至于使用插件来增强 MyBatis，比如 Mybatis-PageHelper，一个通用的 MyBatis 分页插件。想不到 MyBatis 还挺灵活，支持插件机制。仔细翻阅官方文档可以确定 MyBatis 允许你在 Mapper 执行过程中的某些点拦截调用，已经知晓动态代理的朋友们（参见切面和动态代理以及字节码），彷佛看透了 MyBatis 插件。
默认情况下，MyBatis 允许插件拦截以下方法的调用：
   Classes Methods     Executor update, query, flushStatements, commit, rollback, getTransaction, close, isClosed   ParameterHandler getParameterObject, setParameters   ResultSetHandler handleResultSets, handleOutputParameters   StatementHandler prepare, parameterize, batch, update, query    顾名思义，MyBatis 不愧为 SQL 映射框架。这些重要的组件共同参与了 MyBatis 一般的工作流程：</description>
    </item>
    
    <item>
      <title>造你自己的 Spring Boot Starter 组件</title>
      <link>https://h2cone.github.io/2020/01/23/your-own-spring-boot-starter/</link>
      <pubDate>Thu, 23 Jan 2020 20:16:58 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2020/01/23/your-own-spring-boot-starter/</guid>
      <description>自动配置 遥想以前，Spring 集成其它模块往往需要大量的 XML 配置和 Java 配置，经历过 SSM（Spring、Spring MVC、MyBatis）或者 SSH（Struts、Spring、Hibernate）框架搭建和填空的人们应该深有体会，特别费时费力，直到 Spring Boot 的流行才有所改善。
Spring Boot 简化配置，开箱即用，得益于自动配置（auto-configuration）。开启了自动配置的 Spring Boot 程序会尝试猜测和配置我们可能需要的 Bean。如果我们给一般的 Spring Boot Web 程序（添加了 spring-boot-starter-web 依赖的 Spring Boot 程序）关联的 application.yml 文件增加一行：
debug: true 程序启动成功后，可以在控制台观察到一段叫做 CONDITIONS EVALUATION REPORT 的冗长日志，下面截取若干部分：
============================ CONDITIONS EVALUATION REPORT ============================ Positive matches: ----------------- ... EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration matched: - @ConditionalOnClass found required classes &amp;#39;org.apache.catalina.startup.Tomcat&amp;#39;, &amp;#39;org.apache.coyote.UpgradeProtocol&amp;#39; (OnClassCondition) ... Negative matches: ----------------- ... EmbeddedWebServerFactoryCustomizerAutoConfiguration.JettyWebServerFactoryCustomizerConfiguration: Did not match: - @ConditionalOnClass did not find required classes &amp;#39;org.</description>
    </item>
    
    <item>
      <title>注解处理器</title>
      <link>https://h2cone.github.io/2019/11/30/annotation-processor/</link>
      <pubDate>Sat, 30 Nov 2019 23:43:35 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2019/11/30/annotation-processor/</guid>
      <description>为什么使用 Getter/Setter Java 的啰嗦和冗余是闻名于世的，特别在开发基于 Java 的业务系统的时候，继续不断地编写普通的 Java 类（数据类型），不假思索地用 private 修饰成员变量，熟练运用编辑器或集成开发环境不停地生成 Getter、Setter、ToString、Constructor 等方法。
public class Member { public static final Logger log = LoggerFactory.getLogger(Member.class); private Long id; private String name; public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public String toString() { return new StringJoiner(&amp;#34;, &amp;#34;, Member.</description>
    </item>
    
    <item>
      <title>Java 程序探测或追踪</title>
      <link>https://h2cone.github.io/2019/10/30/instrument_attach/</link>
      <pubDate>Wed, 30 Oct 2019 15:27:01 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2019/10/30/instrument_attach/</guid>
      <description>序言 什么情况下应该探测或追踪程序？应用程序无不例外可能存在运行时才暴露的 bug，生产环境的故障排除，不得不依靠读日志和 Review 代码，运气好的话也许只看异常栈和关键代码就能快速提出假设，在本地验证通过，修复后发布上线，最后还可能对先前测试不充分感到羞愧。很不幸，如果是底层或性能的疑难杂症，CPU、内存、I/O、进程、线程、堆、栈等都可能提供线索，它们在程序运行过程中动态变化，只有探测或追踪它们才能超越表面的代码观察，从而搜集下层行为数据以供分析，参与 debug 的程序员则如虎添翼。在 Java 平台，BTrace 非常适合动态追踪正在运行的程序，它的基础正是 Java Instrumention 和 Java Attach API。
Instrument 简介 Oracle JDK 里有一个名为 java.lang.instrument 的包：
 Provides services that allow Java programming language agents to instrument programs running on the JVM. The mechanism for instrumentation is modification of the byte-codes of methods. [0]
 从它的简介，我们可以确认的是 instrumentation 的机制是更改 Java 字节码，而且我们已经知道类文件包含字节码。不过等等，instrumentation 和 instrument 都是什么意思？在这里的 instrument，我暂时还找不到恰到好处的汉译，作动词时意为“给&amp;hellip;&amp;hellip;装测量仪器”或者“仪器化”，结合简介，此包允许 Java agent 给运行在 JVM 上的程序装测量仪器。Java agent 又是什么？它可以作为 Java 程序的探针，它本质上是一个 Jar 文件，它利用 Instrumentation 来更改已加载到 JVM 的类，例如往原类插入用于探测或追踪的代码，即所谓的埋点，它的底层实现依赖于 JVMTI (Java Virtual Machine Tool Interface)。</description>
    </item>
    
    <item>
      <title>切面和动态代理以及字节码</title>
      <link>https://h2cone.github.io/2019/09/17/aop_proxy_bytecode/</link>
      <pubDate>Tue, 17 Sep 2019 11:29:21 +0800</pubDate>
      
      <guid>https://h2cone.github.io/2019/09/17/aop_proxy_bytecode/</guid>
      <description>楔子 想象一下，我们编写的代码块重复了两次或两次以上，理智的程序员可能会考虑重构，提取公共的部分抽象成函数或方法，通过重用函数或方法以此减少冗余，简化代码，甚至预防了“牵一发而动全身”的噩梦，这已经算得上是对 DRY 和 SoC 原则的践行。DRY（Don&amp;rsquo;t repeat yourself）教导我们尽量减少重复代码，而 SoC（Separation of Concerns）指的是关注点分离，因为关注点混杂会极大地增强复杂性，好比把什么都混为一谈，堆积而成的祖传代码，这又是程序员们的另一个噩梦，所以才把复杂的问题分解成若干独立的小问题，模块化，极力追求“高内聚，低耦合”。
AOP（Aspect-oriented programming）是对横向的重用，非常符合 DRY 和 SoC 的原则。直观上，代码总是从上往下执行，不妨称之为纵向，OOP（Object-oriented Programming）的继承也可看作是纵向；相对则是横向，从横跨多个类的角度来看，横向有着许许多多的统一逻辑可以切入，比如安全检查、异常处理、日志输出、事务管理、追踪、监控等等，这些统一逻辑能够被抽象成模块，重用它们甚至不需要显式使用或只需要编写简单的元数据进行声明，一次编写，到处执行，Java 程序员们已经体验过不少 Spring AOP 的魔术。
AOP 能够使前文所述的统一逻辑模块化，这些统一逻辑可称之为横切关注点（crosscutting concerns），切面（Aspect）则作为模块，因此译为切面导向编程。切面的作用效果彷佛是往程序的执行点注入了新的代码，这些执行点被称之为接入点（Join Point），比如方法调用的前后；接入点的集合称之为切入点 （Pointcut），比如满足条件的一组方法；注入的代码称之为建议（Advice），比如在方法调用前后输出日志；其中代码注入的术语是编织（Weaving），既然把编织工作交给库或框架，那么可能是在编译时编织（Compile-time weaving）或运行时编织（Run-Time weaving），还可能在编译后编织（Post-compile weaving） 或加载时编织（Load-time weaving）。
虽说如此，那属于 Spring 核心的 Spring AOP 的魔术是怎么做到的呢？
喧闹中，听见了一句悄悄话：
 Spring AOP is implemented by using runtime proxies.
 另一句悄悄话：
 In the Spring Framework, an AOP proxy is a JDK dynamic proxy or a CGLIB proxy.
 原来 Spring AOP 是使用运行时代理实现的，代理则是由 JDK 动态代理或 CGLIB 生成。据传闻所说，利用 JDK 动态代理能够在运行时生成代理，一番打听之后也了解到 CGLIB 是一个字节码生成和转换库，也可用于动态生成代理。</description>
    </item>
    
  </channel>
</rss>
